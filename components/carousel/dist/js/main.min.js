/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["Carousel"] = __webpack_require__(3);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 1 */,
/* 2 */,
/* 3 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Carousel = function () {
	  function Carousel(_ref) {
	    var element = _ref.element,
	        _ref$slideChangeCallb = _ref.slideChangeCallback,
	        slideChangeCallback = _ref$slideChangeCallb === undefined ? null : _ref$slideChangeCallb;
	
	    _classCallCheck(this, Carousel);
	
	    this.root = element;
	    this.slider = this.root.querySelector('.buic-carousel__slider');
	
	    this._slideChangeCallback = slideChangeCallback;
	
	    this.slidesLength = this.slider.children.length;
	
	    this._updateSlideWidth();
	
	    this.currentIndex = 1;
	    this.lastSlideTranslateX = 0;
	    this.currentSlideTranslateX = 0;
	    this.isDragged = false;
	    this.isClicked = false;
	    this.firstSwipe = false;
	
	    this._onStart = this._onStart.bind(this);
	    this._onMove = this._onMove.bind(this);
	    this._onEnd = this._onEnd.bind(this);
	    this._onClick = this._onClick.bind(this);
	    this._update = this._update.bind(this);
	
	    this.enableDragging();
	
	    window.addEventListener('resize', this._onResize.bind(this));
	  }
	
	  _createClass(Carousel, [{
	    key: 'next',
	    value: function next() {
	      if (!this._isLastSlide()) {
	        this.goTo(this.currentIndex + 1);
	      }
	    }
	  }, {
	    key: 'prev',
	    value: function prev() {
	      if (!this._isFirstSlide()) {
	        this.goTo(this.currentIndex - 1);
	      }
	    }
	  }, {
	    key: 'goTo',
	    value: function goTo(index) {
	      if (this.isDragged) {
	        return;
	      }
	
	      if (index !== this.currentIndex && typeof this._slideChangeCallback === 'function') {
	        this._slideChangeCallback(this, index);
	      }
	
	      this.currentIndex = index;
	      this.slider.style.transform = 'translateX(' + -(this.currentIndex - 1) * this.slideWidth + 'px)';
	      this.lastSlideTranslateX = this.slideWidth * (this.currentIndex - 1);
	    }
	  }, {
	    key: 'enableDragging',
	    value: function enableDragging() {
	      this.root.addEventListener('touchstart', this._onStart);
	      this.root.addEventListener('touchmove', this._onMove);
	      this.root.addEventListener('touchend', this._onEnd);
	      this.root.addEventListener('touchcancel', this._onEnd);
	
	      this.root.addEventListener('click', this._onClick);
	      this.root.addEventListener('mousedown', this._onStart);
	      this.root.addEventListener('mousemove', this._onMove);
	      document.addEventListener('mouseup', this._onEnd);
	    }
	  }, {
	    key: 'disableDragging',
	    value: function disableDragging() {
	      // if slide is currently being dragged, let it go
	      this._onEnd();
	
	      this.root.removeEventListener('touchstart', this._onStart);
	      this.root.removeEventListener('touchmove', this._onMove);
	      this.root.removeEventListener('touchend', this._onEnd);
	      this.root.removeEventListener('touchcancel', this._onEnd);
	
	      this.root.removeEventListener('mousedown', this._onStart);
	      this.root.removeEventListener('mousemove', this._onMove);
	      document.removeEventListener('mouseup', this._onEnd);
	    }
	  }, {
	    key: '_onStart',
	    value: function _onStart(event) {
	      this.startX = event.touches ? event.touches[0].screenX : event.screenX;
	      this.startY = event.touches ? event.touches[0].screenY : event.screenY;
	      this.currentX = this.startX;
	      this.currentY = this.startY;
	      this.isDragged = true;
	      this.firstSwipe = true;
	
	      this.rafId = requestAnimationFrame(this._update);
	    }
	  }, {
	    key: '_onMove',
	    value: function _onMove(event) {
	      this.currentX = event.touches ? event.touches[0].screenX : event.screenX;
	      this.currentY = event.touches ? event.touches[0].screenY : event.screenY;
	
	      var touch = event.changedTouches;
	      var deltaX = this.currentX - this.startX;
	      var deltaY = this.currentY - this.startY;
	
	      // this allows scrolling vertically on mobile devices
	      if (touch && this.firstSwipe) {
	        if (Math.abs(deltaX) < Math.abs(deltaY)) {
	          this.isDragged = false;
	        }
	
	        this.firstSwipe = false;
	      }
	    }
	  }, {
	    key: '_onEnd',
	    value: function _onEnd() {
	      if (!this.isDragged) {
	        return;
	      }
	
	      this.slider.style.transition = '';
	
	      var index = Math.round(-this.currentSlideTranslateX / this.slideWidth) + 1;
	
	      index = Math.max(1, index);
	      index = Math.min(index, this.slidesLength);
	
	      this.isDragged = false;
	
	      // if content is clickable, we should allow to make action when there was no change in slides
	      if (this.currentIndex !== index) {
	        this.isClicked = true;
	      }
	
	      this.goTo(index);
	
	      if (this.rafId) {
	        cancelAnimationFrame(this.rafId);
	      }
	    }
	  }, {
	    key: '_onClick',
	    value: function _onClick(event) {
	      if (this.isClicked) {
	        this.isClicked = false;
	        event.preventDefault();
	        event.stopPropagation();
	      }
	    }
	  }, {
	    key: '_update',
	    value: function _update() {
	      if (!this.isDragged) {
	        return;
	      }
	
	      this.rafId = requestAnimationFrame(this._update);
	
	      var screenX = this.currentX - this.startX;
	
	      this.currentSlideTranslateX = screenX - this.lastSlideTranslateX;
	
	      this.slider.style.transition = 'initial';
	      this.slider.style.transform = 'translateX(' + this.currentSlideTranslateX + 'px)';
	    }
	  }, {
	    key: '_updateSlideWidth',
	    value: function _updateSlideWidth() {
	      this.slideWidth = this.slider.getBoundingClientRect().width / this.slidesLength;
	    }
	  }, {
	    key: '_isLastSlide',
	    value: function _isLastSlide() {
	      return this.currentIndex === this.slidesLength;
	    }
	  }, {
	    key: '_isFirstSlide',
	    value: function _isFirstSlide() {
	      return this.currentIndex === 1;
	    }
	  }, {
	    key: '_onResize',
	    value: function _onResize() {
	      var slideWidthBefore = this.slideWidth;
	
	      this._updateSlideWidth();
	
	      if (slideWidthBefore !== this.slideWidth) {
	        this.goTo(this.currentIndex);
	      }
	    }
	  }]);
	
	  return Carousel;
	}();
	
	exports.default = Carousel;
	module.exports = exports['default'];

/***/ })
/******/ ]);
//# sourceMappingURL=main.min.js.map