/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["ElementHighlighter"] = __webpack_require__(10);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },

/***/ 10:
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _animationHelper = __webpack_require__(11);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OVERLAY_CLASS = 'buic-eh-overlay';
	var OVERLAY_ACTIVE_CLASS = 'buic-eh-overlay--active';
	var NEW_CONTAINER_CLASS = 'buic-eh-container';
	
	var ElementHighlighter = function () {
	  function ElementHighlighter(_ref) {
	    var element = _ref.element,
	        container = _ref.container;
	
	    _classCallCheck(this, ElementHighlighter);
	
	    this.element = element;
	    this.container = container;
	
	    this.shown = false;
	    this.placeholder = null;
	    this.overlay = null;
	  }
	
	  _createClass(ElementHighlighter, [{
	    key: 'hide',
	    value: function hide(callback) {
	      var _this = this;
	
	      if (!this.shown) {
	        if (typeof callback === 'function') {
	          callback(null);
	        }
	
	        return;
	      }
	
	      (0, _animationHelper.onTransitionEnd)(this.overlay, function () {
	        var newContainer = _this.element.parentNode;
	
	        // move element to its original place and remove overlay
	        _this.placeholder.parentNode.replaceChild(_this.element, _this.placeholder);
	        newContainer.parentNode.removeChild(newContainer);
	        _this.overlay.parentNode.removeChild(_this.overlay);
	
	        if (typeof callback === 'function') {
	          callback(_this.overlay);
	        }
	
	        // update status
	        _this.placeholder = null;
	        _this.overlay = null;
	        _this.shown = false;
	      });
	
	      // start animation
	      this.overlay.classList.remove(OVERLAY_ACTIVE_CLASS);
	    }
	  }, {
	    key: 'show',
	    value: function show(callback) {
	      if (this.shown) {
	        if (typeof callback === 'function') {
	          callback(null);
	        }
	
	        return;
	      }
	
	      var containerBcr = this.container.getBoundingClientRect();
	      var elementBcr = this.element.getBoundingClientRect();
	      var elementStyles = window.getComputedStyle(this.element);
	      var elementParent = this.element.parentNode;
	
	      // replace original position of the highlighted element with a placeholder
	      var placeholder = document.createElement('div');
	
	      placeholder.style.width = elementBcr.width + 'px';
	      placeholder.style.height = elementBcr.height + 'px';
	      placeholder.style.margin = elementStyles.margin;
	
	      elementParent.replaceChild(placeholder, this.element);
	
	      // crate an overlay
	      var overlay = document.createElement('div');
	
	      overlay.classList.add(OVERLAY_CLASS);
	      overlay.style.width = containerBcr.width + 'px';
	      overlay.style.height = containerBcr.height + 'px';
	      overlay.style.left = containerBcr.left + 'px';
	      overlay.style.top = containerBcr.top + 'px';
	
	      // create a container for highlighted element to make sure it maintains size
	      var newContainer = document.createElement('div');
	
	      newContainer.classList.add(NEW_CONTAINER_CLASS);
	      newContainer.style.width = elementBcr.width + 'px';
	      newContainer.style.height = elementBcr.height + 'px';
	      newContainer.style.left = elementBcr.left + 'px';
	      newContainer.style.top = elementBcr.top + 'px';
	
	      // put all elements together
	      newContainer.appendChild(this.element);
	      document.body.appendChild(overlay);
	      document.body.appendChild(newContainer);
	
	      // start animation
	      if (typeof callback === 'function') {
	        (0, _animationHelper.onTransitionEnd)(overlay, function () {
	          return callback(overlay);
	        });
	      }
	
	      overlay.getBoundingClientRect();
	      overlay.classList.add(OVERLAY_ACTIVE_CLASS);
	
	      // update status
	      this.overlay = overlay;
	      this.placeholder = placeholder;
	      this.shown = true;
	    }
	  }]);
	
	  return ElementHighlighter;
	}();
	
	exports.default = ElementHighlighter;
	module.exports = exports['default'];

/***/ },

/***/ 11:
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function onTransitionEnd(element, callback) {
	  element.addEventListener('transitionend', function onEnd(e) {
	    if (e.target !== element) {
	      return;
	    }
	
	    element.removeEventListener('transitionend', onEnd);
	
	    if (typeof callback === 'function') {
	      callback();
	    }
	  });
	}
	
	exports.onTransitionEnd = onTransitionEnd;

/***/ }

/******/ });
//# sourceMappingURL=main.min.js.map